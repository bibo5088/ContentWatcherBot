// <auto-generated />
using ContentWatcherBot.Database;
using ContentWatcherBot.Database.Watchers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContentWatcherBot.Migrations
{
    [DbContext(typeof(WatcherContext))]
    [Migration("20191118104700_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0-preview1.19506.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ContentWatcherBot.Database.Guild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("ContentWatcherBot.Database.Hook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("ChannelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("GuildId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateMessage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("WatcherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("WatcherId");

                    b.ToTable("Hooks");
                });

            modelBuilder.Entity("ContentWatcherBot.Database.Watchers.Watcher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("HashCode")
                        .HasColumnType("int");

                    b.Property<string>("PreviousContentIds")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Watchers");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("ContentWatcherBot.Database.Watchers.ItchIoWatcher", b =>
                {
                    b.HasBaseType("ContentWatcherBot.Database.Watchers.Watcher");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("ContentWatcherBot.Database.Watchers.MangadexWatcher", b =>
                {
                    b.HasBaseType("ContentWatcherBot.Database.Watchers.Watcher");

                    b.Property<string>("MangaId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ContentWatcherBot.Database.Watchers.RssFeedWatcher", b =>
                {
                    b.HasBaseType("ContentWatcherBot.Database.Watchers.Watcher");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("ContentWatcherBot.Database.Hook", b =>
                {
                    b.HasOne("ContentWatcherBot.Database.Guild", "Guild")
                        .WithMany("Hooks")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentWatcherBot.Database.Watchers.Watcher", "Watcher")
                        .WithMany("Hooks")
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
